angular.module("QuizApp", ["myDirective", "ngCookies"]).controller("QuizController", ["$log", "$scope", "$cookies", function (h, k, e) { var g = this; this.incorrectCount = this.correctCount = 0; this.index = -1; this.tab = "init"; this.random = !1; this.shuffle = !0; this.hasErrors = this.title = this.browse = !1; this.eMax = this.eIndex = -1; this.errMsg = ""; this.keyword = []; this.keywordRuleAnd = !0; this.files = fileList; this.hasFlags = !1; this.fMax = this.fIndex = -1; this.toTab = function (a) { this.tab = a; $(".navbar-toggle").click() }; this.jump = function () { $("#sn").val(""); $("#errmsg").hide(); $("#jump").modal("toggle"); $(".navbar-toggle").click() }; this.closeMenu = function () { $(".navbar-toggle").click() }; this.clear = function () { $("#files").val("") }; this.close = function () { this.tab = this.question ? "quiz" : "file"; this.clear() }; this.radio = function (a, b) { var c = $("input[name='answer']:eq(" + a + ")"); c.prop("disabled") || (c.prop("checked", !0), this.check(b)) }; this.ckbox = function (a, b) { var c = $("input[name='answer']:eq(" + a + ")"); c.prop("disabled") || (c.prop("checked", !c.prop("checked")), this.check(b)) }; this.check = function (a) { a.stopPropagation(); var b = 0; $("input[name='answer']").each(function () { $(this).prop("checked") && b++ }); a = this.question.type.toLowerCase(); this.question.enough = "single" === a && 1 === b || "multi" === a && 1 < b }; this.answer = function () { this.question.type.toLowerCase(); var a = !0; $("input[name='answer']").each(function (b) { var c = $(this); c.prop("disabled", !0); a = a && !(c.prop("checked") ^ "true" === c.attr("value")); g.question.options[b].selected = c.prop("checked") }); this.question.answered = !0; (this.question.correct = a) ? ($("#img1").show(), setTimeout(function () { $("#img1").fadeOut(1500) }, 500), this.correctCount++) : ($("#img2").show(), setTimeout(function () { $("#img2").fadeOut(1500) }, 500), this.incorrectCount++, this.hasErrors = !0, Questions.addErrors(this.question)) }; this.next = function (a) { a = this.index + a; var b = 0 !== this.keyword.length ? Questions.search() : Questions.get(); a >= b.length && (a = 0, this.random && Util.shuffle(b)); this.index = a; this.question = new Question(b[this.index], this.shuffle); a = localStorage.getItem("quiz.settings") || e.get("quiz.settings"); a = void 0 === a ? Util.getDefaultSettings() : $.extend(Util.getDefaultSettings(), angular.fromJson(a)); a.memorize && (a.position = this.index); a.correctCount = this.correctCount; a.incorrectCount = this.incorrectCount; localStorage.setItem("quiz.settings", angular.toJson(a)); localStorage.setItem("errorQuestions", angular.toJson(Questions.getErrors())) }; this.jumpTo = function () { var a = parseInt($("#sn").val(), 10); 1 <= a && a <= this.questions.length ? (this.index = a - 1, this.next(0), $("#sn").val(""), $("#errmsg").hide(), $("#jump").modal("toggle")) : ($("#sn").val(""), $("#errmsg").show()) }; this.init = function () { try { var a = angular.fromJson(localStorage.getItem("storedQuestions")); if ("[object Array]" === Object.prototype.toString.call(a)) { var b = angular.fromJson(localStorage.getItem("errorQuestions")); "[object Array]" === Object.prototype.toString.call(b) && (Questions.setErrors(b), this.hasErrors = 0 < b.length); Questions.init(a); this.initQuestions(); this.tab = "quiz" } else this.tab = "file" } catch (c) { this.tab = "file" } }; this.getFile = function () { if ("" !== this.file) { var a = this; $.ajax({ url: "resources/" + this.file + ".txt", method: "get", cache: !1, success: function (b) { b = b.split(/\r?\n|\r/g); Util.parseFile(a, e, b) } }) } }; this.parseFile = function (a) { a = a.target.files[0]; var b = new FileReader; b.onload = function (a) { a = b.result.split(/\r?\n|\r/g); Util.parseFile(g, e, a) }; b.readAsText(a) }; this.loadSettings = function (a) { var b = localStorage.getItem("quiz.settings") || e.get("quiz.settings"); b = void 0 === b ? Util.getDefaultSettings() : $.extend(Util.getDefaultSettings(), angular.fromJson(b)); b.random ? $("#random").prop("checked", b.random).trigger("change") : $("#memorize").prop("checked", b.memorize); $("#shuffle").prop("checked", b.shuffle); $("#browse").prop("checked", b.browse); $("#title").prop("checked", b.title); $("#single").prop("checked", b.single); $("#multi").prop("checked", b.multi); $("#classes").append('<div class="col-xs-12"><b>\u985e\u5225\u8a2d\u5b9a</b></div>'); a = Questions.getClasses(); for (var c = 0, d = 0; d < a.length; d++) c < a[d].name.length && (c = a[d].name.length); var f = 12; 2 >= c ? f = 4 : 6 >= c && (f = 6); for (d = 0; d < a.length; d++) $("#classes").append('<div class="col-xs-' + f + '"><input type="checkbox" name="class" value="' + a[d].name + '" /><span>' + a[d].name + "[" + a[d].count + "]</span></div>"); $("#classes").find("span").each(function () { $(this).on("click", function () { Util.check(this) }) }); "boolean" === typeof b["class"] ? $('input[name="class"]').each(function () { $(this).prop("checked", !0) }) : "string" === typeof b["class"] && $('input[name="class"]').each(function () { var a = $(this); -1 !== b["class"].indexOf(a.val()) && a.prop("checked", !0) }) }; this.saveSettings = function () { var a = localStorage.getItem("quiz.settings") || e.get("quiz.settings"); a = void 0 === a ? Util.getDefaultSettings() : $.extend(Util.getDefaultSettings(), angular.fromJson(a)); a.random = $("#random").prop("checked"); a.shuffle = $("#shuffle").prop("checked"); a.memorize = $("#memorize").prop("checked"); a.browse = $("#browse").prop("checked"); a.title = $("#title").prop("checked"); a.single = $("#single").prop("checked"); a.multi = $("#multi").prop("checked"); var b = ""; $('input[name="class"]').each(function () { var a = $(this); a.prop("checked") && (b += a.val() + ",") }); if ("" === b) return this.errMsg = "\u8acb\u81f3\u5c11\u9078\u64c7\u4e00\u7a2e\u985e\u5225", $("#warning").modal("toggle"), !1; if (a.single || a.multi) { a["class"] = b.substring(0, b.length - 1); var c = {}; c["class"] = a["class"].split(","); a.single && !a.multi ? c.type = "single" : a.multi && !a.single && (c.type = "multi"); var d = []; d = 0 === this.keyword.length ? Questions.get(c) : Questions.search(c, this.keyword, this.keywordRuleAnd); if (0 === d.length) return this.errMsg = "\u9078\u64c7\u7684\u985e\u5225\u53ca\u984c\u578b\u672a\u5305\u542b\u4efb\u4f55\u984c\u76ee", $("#warning").modal("toggle"), !1; a.position = 0; a.random ? this.index = 0 : a.memorize && (a.position = this.index) } else return this.errMsg = "\u8acb\u81f3\u5c11\u9078\u64c7\u4e00\u7a2e\u984c\u578b", $("#warning").modal("toggle"), !1; localStorage.setItem("quiz.settings", angular.toJson(a)); this.initQuestions(); this.tab = "quiz" }; this.initQuestions = function () { var a = localStorage.getItem("quiz.settings") || e.get("quiz.settings"); a = void 0 === a ? Util.getDefaultSettings() : $.extend(Util.getDefaultSettings(), angular.fromJson(a)); this.correctCount = a.correctCount; this.incorrectCount = a.incorrectCount; this.keyword = a.keyword; this.keywordRuleAnd = a.keywordRuleAnd; var b = {}; "boolean" === typeof a["class"] ? b["class"] = { "!is": "undefined" } : "string" === typeof a["class"] && (b["class"] = a["class"].split(",")); a.single && !a.multi ? b.type = "single" : a.multi && !a.single && (b.type = "multi"); var c = 0 === this.keyword.length ? Questions.get(b) : Questions.search(b, this.keyword, this.keywordRuleAnd); 0 === c.length ? (Questions.set(Questions.get({ "class": { "!is": "undefined" } })), $.extend(a, { "class": !0, single: !0, multi: !0, keyword: [], keywordRuleAnd: !0, correctCount: 0, incorrectCount: 0 }), localStorage.setItem("quiz.settings", angular.toJson(a)), this.keyword = [], this.keywordRuleAnd = !0, this.incorrectCount = this.correctCount = 0) : 0 === this.keyword.length ? Questions.set(c) : Questions.setSearched(c); this.random = a.random; this.shuffle = a.shuffle; this.browse = a.browse; this.title = a.title; $.each(a.flags, function (b) { Questions.setFlag(a.flags[b]) }); this.hasFlags = 0 != a.flags.length; this.questions = { length: 0 === this.keyword.length ? Questions.get().length : Questions.search().length }; if (a.random) Util.shuffle(0 === this.keyword.length ? Questions.get() : Questions.search()), this.index = 0; else if (c = 0 === this.keyword.length ? Questions.get() : Questions.search(), c.sort(function (a, b) { return a.__id - b.__id }), -1 === this.index) this.index = a.position < this.questions.length ? a.position : 0; else { this.index = 0; var d = this; $.each(c, function (a) { c[a].__id === d.question.__id && (d.index = a) }) } this.next(0) }; this.toError = function () { this.tab = "error"; $(".navbar-toggle").click(); this.eIndex = this.eMax = Questions.getErrors().length - 1; this.nextError(0) }; this.nextError = function (a) { a = this.eIndex + a; a >= Questions.getErrors().length && (a = 0); this.eIndex = a; this.question = Questions.getErrors()[this.eIndex] }; this.toQuiz = function () { this.tab = "quiz"; this.next(0) }; this.saveError = function () { $("#confirm").modal("toggle"); $(".navbar-toggle").click() }; this.confirmSaveError = function () { $("#confirm").modal("toggle"); Util.saveQuestions(Questions.getErrors()) }; this.clearError = function () { $("#clearError").modal("toggle"); $(".navbar-toggle").click() }; this.confirmClearError = function () { Questions.clearErrors(); this.hasErrors = !1; this.incorrectCount = this.correctCount = 0; this.toQuiz(); $("#clearError").modal("toggle") }; this.toFlag = function () { this.tab = "flag"; $(".navbar-toggle").click(); this.fIndex = 0; this.fMax = Questions.getFlags().length - 1; this.nextFlag(0) }; this.nextFlag = function (a) { a = this.fIndex + a; a >= Questions.getFlags().length && (a = 0); this.fIndex = a; a = Questions.getFlagQuestions(); this.question = new Question(a[this.fIndex], this.shuffle) }; this.saveFlag = function () { $("#confirmFlag").modal("toggle"); $(".navbar-toggle").click() }; this.confirmSaveFlag = function () { $("#confirmFlag").modal("toggle"); Util.saveQuestions(Questions.getFlagQuestions()) }; this.clearFlag = function () { $("#clearFlag").modal("toggle"); $(".navbar-toggle").click() }; this.confirmClearFlag = function () { Questions.unsetFlag(); this.toQuiz(); this.hasFlags = !1; $("#clearFlag").modal("toggle") }; this.search = function () { $("#errmsg2").hide(); $("#keyword").val(this.keyword.join(";")); this.keywordRuleAnd ? $("#and").prop("checked", !0) : $("#or").prop("checked", !0); $("#search").modal("toggle"); $(".navbar-toggle").click() }; this.searchFor = function () { var a = $("#keyword").val().toLowerCase().split(";"), b = $.grep(a, function (b, c) { return "" !== b && a.indexOf(b) === c }); if (0 !== b.length) { var c = this.keyword, d = this.keywordRuleAnd; this.keyword = b; this.keywordRuleAnd = $("#and").prop("checked"); this.initKeyword() ? $("#search").modal("toggle") : (this.keyword = c, this.keywordRuleAnd = d, $("#keyword").val(this.keyword.join(";")), this.keywordRuleAnd ? $("#and").prop("checked", !0) : $("#or").prop("checked", !0)) } else 0 !== this.keyword.length ? (c = localStorage.getItem("quiz.settings") || e.get("quiz.settings"), c = void 0 === c ? Util.getDefaultSettings() : $.extend(Util.getDefaultSettings(), angular.fromJson(c)), c.keyword = this.keyword = b, c.keywordRuleAnd = this.keywordRuleAnd = $("#and").prop("checked"), localStorage.setItem("quiz.settings", angular.toJson(c)), this.initQuestions()) : this.keywordRuleAnd = $("#and").prop("checked"), $("#search").modal("toggle") }; this.initKeyword = function () { var a = localStorage.getItem("quiz.settings") || e.get("quiz.settings"); a = void 0 === a ? Util.getDefaultSettings() : $.extend(Util.getDefaultSettings(), angular.fromJson(a)); var b = {}; "boolean" === typeof a["class"] ? b["class"] = { "!is": "undefined" } : "string" === typeof a["class"] && (b["class"] = a["class"].split(",")); a.single && !a.multi ? b.type = "single" : a.multi && !a.single && (b.type = "multi"); b = Questions.search(b, this.keyword, this.keywordRuleAnd); if (0 === b.length) return $("#errmsg2").show(), !1; $("#errmsg2").hide(); Questions.setSearched(b); a.keyword = this.keyword; a.keywordRuleAnd = this.keywordRuleAnd; localStorage.setItem("quiz.settings", angular.toJson(a)); this.random = a.random; this.shuffle = a.shuffle; this.browse = a.browse; this.title = a.title; this.questions = { length: Questions.search().length }; a.random ? Util.shuffle(Questions.search()) : Questions.search().sort(function (a, b) { return a.__id - b.__id }); this.index = 0; this.next(0); return !0 }; this.switchFlag = function () { this.hasFlags = this.question.flag ? 0 <= (this.fMax = Questions.unsetFlag(this.question.__id) - 1) : 0 <= (this.fMax = Questions.setFlag(this.question.__id) - 1); this.question.flag = !this.question.flag; var a = localStorage.getItem("quiz.settings") || e.get("quiz.settings"); a = void 0 === a ? Util.getDefaultSettings() : $.extend(Util.getDefaultSettings(), angular.fromJson(a)); a.flags = Questions.getFlags(); localStorage.setItem("quiz.settings", angular.toJson(a)); "flag" === this.tab && (0 <= this.fMax ? this.nextFlag(0) : this.toQuiz()) } }]);